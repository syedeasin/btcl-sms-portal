import { getTranslations } from 'next-intl/server'
import Link from 'next/link'

import { Header } from '@/components/layout/Header'
import { Footer } from '@/components/layout/Footer'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card'

// Types
interface Office {
  name: string
  address: string
  phone: string
  email: string
  hours: string
  type: 'primary' | 'support'
}

interface SupportChannel {
  title: string
  description: string
  contact: string
  response: string
  icon: string
  color: string
}

interface FAQ {
  question: string
  answer: string
}

interface ContactPageProps {
  params: Promise<{
    locale: string
  }>
}

// Constants
const SUPPORT_CHANNEL_COLORS = {
  email: 'bg-blue-100 text-blue-600',
  phone: 'bg-green-100 text-green-600',
  chat: 'bg-purple-100 text-purple-600',
} as const

const FORM_SUBJECTS = [
  { key: 'sales', icon: 'ЁЯТ╝' },
  { key: 'support', icon: 'ЁЯФз' },
  { key: 'billing', icon: 'ЁЯТ░' },
  { key: 'partnership', icon: 'ЁЯдЭ' },
  { key: 'other', icon: 'ЁЯУЛ' },
] as const

// Utility functions
const getLocalizedText = (locale: string, enText: string, bnText: string): string => {
  return locale === 'en' ? enText : bnText
}

// Custom hooks
const useContactData = (locale: string) => {
  const offices: Office[] = [
    {
      name: getLocalizedText(locale, 'BTCL Head Office', 'ржмрж┐ржЯрж┐рж╕рж┐ржПрж▓ ржкрзНрж░ржзрж╛ржи ржХрж╛рж░рзНржпрж╛рж▓ржпрж╝'),
      address: getLocalizedText(
          locale,
          'Telecommunications Building, 37/E, Eskaton Garden, Dhaka-1000',
          'ржЯрзЗрж▓рж┐ржпрзЛржЧрж╛ржпрзЛржЧ ржнржмржи, рзйрзн/ржЗ, ржЗрж╕рзНржХрж╛ржЯржи ржЧрж╛рж░рзНржбрзЗржи, ржврж╛ржХрж╛-рззрзжрзжрзж'
      ),
      phone: '+рзорзорзж рзи рзкрзорзйрззрззрзлрзжрзж',
      email: 'mdoffice@btcl.gov.bd',
      hours: getLocalizedText(
          locale,
          'Sunday - Thursday: 9:00 AM - 5:00 PM',
          'рж░ржмрж┐ржмрж╛рж░ - ржмрзГрж╣рж╕рзНржкрждрж┐ржмрж╛рж░: рж╕ржХрж╛рж▓ рзп:рзжрзж - ржмрж┐ржХрж╛рж▓ рзл:рзжрзж'
      ),
      type: 'primary',
    },
    {
      name: getLocalizedText(locale, 'SMS Support Center', 'ржПрж╕ржПржоржПрж╕ рж╕рж╛ржкрзЛрж░рзНржЯ рж╕рзЗржирзНржЯрж╛рж░'),
      address: getLocalizedText(
          locale,
          'BTCL Tower, Agargaon, Dhaka-1207, Bangladesh',
          'ржмрж┐ржЯрж┐рж╕рж┐ржПрж▓ ржЯрж╛ржУржпрж╝рж╛рж░, ржЖржЧрж╛рж░ржЧрж╛ржБржУ, ржврж╛ржХрж╛-рззрзирзжрзн, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢'
      ),
      phone: '+880-2-8181234',
      email: 'sms@btcl.gov.bd',
      hours: getLocalizedText(locale, '24/7 Support Available', 'рзирзк/рзн рж╕рж╛ржкрзЛрж░рзНржЯ ржЙржкрж▓ржмрзНржз'),
      type: 'support',
    },
  ]

  const supportChannels: SupportChannel[] = [
    {
      title: getLocalizedText(locale, 'Email Support', 'ржЗржорзЗржЗрж▓ рж╕рж╛ржкрзЛрж░рзНржЯ'),
      description: getLocalizedText(
          locale,
          'Get help via email for non-urgent inquiries',
          'ржЕржЬрж░рзБрж░рж┐ ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржЬржирзНржп ржЗржорзЗржЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрж╛ржи'
      ),
      contact: 'support@btcl.gov.bd',
      response: getLocalizedText(locale, 'Response within 24 hours', 'рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЙрждрзНрждрж░'),
      icon: 'ЁЯУз',
      color: 'email',
    },
    {
      title: getLocalizedText(locale, 'Phone Support', 'ржлрзЛржи рж╕рж╛ржкрзЛрж░рзНржЯ'),
      description: getLocalizedText(
          locale,
          'Speak directly with our technical support team',
          'ржЖржорж╛ржжрзЗрж░ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕рж╣рж╛ржпрж╝рждрж╛ ржжрж▓рзЗрж░ рж╕рж╛ржерзЗ рж╕рж░рж╛рж╕рж░рж┐ ржХржерж╛ ржмрж▓рзБржи'
      ),
      contact: '+880-2-8181234',
      response: getLocalizedText(locale, 'Available 24/7', 'рзирзк/рзн ржЙржкрж▓ржмрзНржз'),
      icon: 'ЁЯУЮ',
      color: 'phone',
    },
    {
      title: getLocalizedText(locale, 'Live Chat', 'рж▓рж╛ржЗржн ржЪрзНржпрж╛ржЯ'),
      description: getLocalizedText(
          locale,
          'Instant support through our website chat',
          'ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржЪрзНржпрж╛ржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╣рж╛ржпрж╝рждрж╛'
      ),
      contact: getLocalizedText(locale, 'Available on website', 'ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЙржкрж▓ржмрзНржз'),
      response: getLocalizedText(locale, 'Instant response', 'рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙрждрзНрждрж░'),
      icon: 'ЁЯТм',
      color: 'chat',
    },
  ]

  const faqs: FAQ[] = [
    {
      question: getLocalizedText(locale, 'How quickly can I get started?', 'ржЖржорж┐ ржХржд рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рж┐?'),
      answer: getLocalizedText(
          locale,
          'You can start sending SMS immediately after account verification and package purchase. The entire process typically takes 1-2 business days.',
          'ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржпрж╛ржЪрж╛ржЗржХрж░ржг ржПржмржВ ржкрзНржпрж╛ржХрзЗржЬ ржХрзНрж░ржпрж╝рзЗрж░ ржкрж░ ржЖржкржирж┐ ржЕржмрж┐рж▓ржорзНржмрзЗ ржПрж╕ржПржоржПрж╕ ржкрж╛ржарж╛ржирзЛ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред рж╕ржорзНржкрзВрж░рзНржг ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╕рж╛ржзрж╛рж░ржгржд рзз-рзи ржХрж╛рж░рзНржпржжрж┐ржмрж╕ рж╕ржоржпрж╝ ржирзЗржпрж╝ред'
      ),
    },
    {
      question: getLocalizedText(
          locale,
          'What payment methods do you accept?',
          'ржЖржкржирж╛рж░рж╛ ржХрзА ржХрзА ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржЧрзНрж░рж╣ржг ржХрж░рзЗржи?'
      ),
      answer: getLocalizedText(
          locale,
          'We accept all major payment methods including mobile banking (bKash, Nagad, Rocket), credit/debit cards, and bank transfers through SSL Commerz.',
          'ржЖржорж░рж╛ SSL Commerz ржПрж░ ржорж╛ржзрзНржпржорзЗ ржорзЛржмрж╛ржЗрж▓ ржмрзНржпрж╛ржВржХрж┐ржВ (ржмрж┐ржХрж╛рж╢, ржиржЧржж, рж░ржХрзЗржЯ), ржХрзНрж░рзЗржбрж┐ржЯ/ржбрзЗржмрж┐ржЯ ржХрж╛рж░рзНржб ржПржмржВ ржмрзНржпрж╛ржВржХ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░ рж╕рж╣ рж╕ржХрж▓ ржкрзНрж░ржзрж╛ржи ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржЧрзНрж░рж╣ржг ржХрж░рж┐ред'
      ),
    },
    {
      question: getLocalizedText(
          locale,
          'Do you provide API documentation?',
          'ржЖржкржирж╛рж░рж╛ ржХрж┐ API ржбржХрзБржорзЗржирзНржЯрзЗрж╢ржи ржкрзНрж░ржжрж╛ржи ржХрж░рзЗржи?'
      ),
      answer: getLocalizedText(
          locale,
          'Yes, we provide comprehensive API documentation with code examples in multiple programming languages, along with SDKs for easy integration.',
          'рж╣рзНржпрж╛ржБ, ржЖржорж░рж╛ ржПржХрж╛ржзрж┐ржХ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛ржпрж╝ ржХрзЛржб ржЙржжрж╛рж╣рж░ржг рж╕рж╣ ржмрзНржпрж╛ржкржХ API ржбржХрзБржорзЗржирзНржЯрзЗрж╢ржи ржкрзНрж░ржжрж╛ржи ржХрж░рж┐, рж╕рж╛ржерзЗ рж╕рж╣ржЬ ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржирзЗрж░ ржЬржирзНржп SDKред'
      ),
    },
    {
      question: getLocalizedText(
          locale,
          'What is your SMS delivery rate?',
          'ржЖржкржирж╛ржжрзЗрж░ ржПрж╕ржПржоржПрж╕ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж░рзЗржЯ ржХржд?'
      ),
      answer: getLocalizedText(
          locale,
          'We maintain a 99.9% delivery rate with an average delivery time of less than 3 seconds for transactional messages and within 30 seconds for promotional messages.',
          'ржЖржорж░рж╛ ржЯрзНрж░рж╛ржирзНржЬрзЗржХрж╢ржирж╛рж▓ ржмрж╛рж░рзНрждрж╛рж░ ржЬржирзНржп рзй рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржХржо ржПржмржВ ржкрзНрж░ржорзЛрж╢ржирж╛рж▓ ржмрж╛рж░рзНрждрж╛рж░ ржЬржирзНржп рзйрзж рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржоржзрзНржпрзЗ ржЧржбрж╝ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝ рж╕рж╣ рзпрзп.рзп% ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж░рзЗржЯ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрж┐ред'
      ),
    },
    {
      question: getLocalizedText(
          locale,
          'Can I get a custom sender ID?',
          'ржЖржорж┐ ржХрж┐ ржХрж╛рж╕рзНржЯржо ржкрзНрж░рзЗрж░ржХ ржЖржЗржбрж┐ ржкрзЗрждрзЗ ржкрж╛рж░рж┐?'
      ),
      answer: getLocalizedText(
          locale,
          'Yes, we provide custom sender ID services. You can use your company name or brand as the sender ID after verification process which typically takes 2-3 business days.',
          'рж╣рзНржпрж╛ржБ, ржЖржорж░рж╛ ржХрж╛рж╕рзНржЯржо ржкрзНрж░рзЗрж░ржХ ржЖржЗржбрж┐ рж╕рзЗржмрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рж┐ред ржпрж╛ржЪрж╛ржЗржХрж░ржг ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛рж░ ржкрж░ ржЖржкржирж┐ ржЖржкржирж╛рж░ ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо ржмрж╛ ржмрзНрж░рзНржпрж╛ржирзНржб ржкрзНрж░рзЗрж░ржХ ржЖржЗржбрж┐ рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржпрж╛ рж╕рж╛ржзрж╛рж░ржгржд рзи-рзй ржХрж╛рж░рзНржпржжрж┐ржмрж╕ рж╕ржоржпрж╝ ржирзЗржпрж╝ред'
      ),
    },
  ]

  return { offices, supportChannels, faqs }
}

// Main Component
export default async function ContactPage({ params }: ContactPageProps) {
  const { locale } = await params
  const t = await getTranslations()
  const { offices, supportChannels, faqs } = useContactData(locale)

  return (
      <div className="min-h-screen bg-white">
        <Header />

        <HeroSection locale={locale} />
        <ContactFormSection locale={locale} supportChannels={supportChannels} offices={offices} />
        <FAQSection faqs={faqs} locale={locale} />

        <Footer />
      </div>
  )
}

// Hero Section Component
function HeroSection({ locale }: { locale: string }) {
  return (
      <section className="relative overflow-hidden bg-gradient-to-br from-btcl-primary via-green-600 to-btcl-secondary py-24">
        {/* Animated Background Elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -left-10 top-10 h-40 w-40 animate-pulse rounded-full bg-white/5 blur-3xl" />
          <div className="absolute -right-16 top-32 h-60 w-60 animate-pulse rounded-full bg-white/5 blur-3xl delay-1000" />
          <div className="absolute bottom-20 left-1/3 h-32 w-32 animate-pulse rounded-full bg-white/5 blur-3xl delay-500" />
        </div>

        <div className="relative z-10 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="text-center text-white">
            {/* Badge */}
            <div className="mb-8 inline-flex items-center gap-2 rounded-full border border-white/20 bg-white/10 px-6 py-3 backdrop-blur-sm">
              <span className="text-2xl">ЁЯУЮ</span>
              <span className="font-semibold">
              {getLocalizedText(locale, '24/7 Support', 'рзирзк/рзн рж╕рж╛ржкрзЛрж░рзНржЯ')}
            </span>
            </div>

            <h1 className="mb-8 text-5xl font-bold leading-tight md:text-6xl lg:text-7xl">
            <span className="block bg-gradient-to-r from-white via-green-100 to-white bg-clip-text text-transparent">
              {getLocalizedText(locale, 'Contact Us', 'ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи')}
            </span>
            </h1>

            <p className="mx-auto max-w-4xl text-xl leading-relaxed text-green-100/90 md:text-2xl">
              {getLocalizedText(
                  locale,
                  'Get in touch with our team for support, sales inquiries, or any questions about our SMS services.',
                  'рж╕рж╛ржкрзЛрж░рзНржЯ, ржмрж┐ржХрзНрж░ржпрж╝ ржЕржирзБрж╕ржирзНржзрж╛ржи ржмрж╛ ржЖржорж╛ржжрзЗрж░ ржПрж╕ржПржоржПрж╕ рж╕рзЗржмрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ ржжрж▓рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред'
              )}
            </p>

            {/* Contact Stats */}
            <div className="mt-16 grid grid-cols-1 gap-8 md:grid-cols-3">
              <div className="rounded-2xl bg-white/10 p-6 backdrop-blur-sm">
                <div className="text-3xl font-bold">24/7</div>
                <div className="text-green-100/90">
                  {getLocalizedText(locale, 'Support Available', 'рж╕рж╛ржкрзЛрж░рзНржЯ ржЙржкрж▓ржмрзНржз')}
                </div>
              </div>
              <div className="rounded-2xl bg-white/10 p-6 backdrop-blur-sm">
                <div className="text-3xl font-bold">&lt;1hr</div>
                <div className="text-green-100/90">
                  {getLocalizedText(locale, 'Response Time', 'ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ рж╕ржоржпрж╝')}
                </div>
              </div>
              <div className="rounded-2xl bg-white/10 p-6 backdrop-blur-sm">
                <div className="text-3xl font-bold">98%</div>
                <div className="text-green-100/90">
                  {getLocalizedText(locale, 'Satisfaction Rate', 'рж╕ржирзНрждрзБрж╖рзНржЯрж┐рж░ рж╣рж╛рж░')}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
  )
}

// Contact Form Section Component
function ContactFormSection({
                              locale,
                              supportChannels,
                              offices,
                            }: {
  locale: string
  supportChannels: SupportChannel[]
  offices: Office[]
}) {
  return (
      <section className="py-24">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 gap-16 lg:grid-cols-2">
            {/* Contact Form */}
            <ContactForm locale={locale} />

            {/* Contact Information */}
            <div className="space-y-12">
              <SupportChannelsSection supportChannels={supportChannels} locale={locale} />
              <OfficeLocationsSection offices={offices} locale={locale} />
            </div>
          </div>
        </div>
      </section>
  )
}

// Contact Form Component
function ContactForm({ locale }: { locale: string }) {
  return (
      <Card className="h-fit">
        <CardHeader className="pb-6">
          <div className="mb-6">
          <span className="inline-flex items-center gap-2 rounded-full bg-green-100 px-4 py-2 text-sm font-semibold text-green-700">
            <span className="h-2 w-2 rounded-full bg-green-500" />
            {getLocalizedText(locale, 'Get in Touch', 'ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи')}
          </span>
          </div>
          <CardTitle className="text-3xl">
            {getLocalizedText(locale, 'Send us a Message', 'ржЖржорж╛ржжрзЗрж░ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржи')}
          </CardTitle>
          <CardDescription className="text-lg">
            {getLocalizedText(
                locale,
                'Fill out the form below and we\'ll get back to you as soon as possible.',
                'ржирж┐ржЪрзЗрж░ ржлрж░рзНржоржЯрж┐ ржкрзВрж░ржг ржХрж░рзБржи ржПржмржВ ржЖржорж░рж╛ ржпржд рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ рж╕ржорзНржнржм ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржлрж┐рж░рзЗ ржЖрж╕ржмред'
            )}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-6">
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700">
                  {getLocalizedText(locale, 'Full Name', 'ржкрзВрж░рзНржг ржирж╛ржо')} *
                </label>
                <input
                    type="text"
                    required
                    className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
                    placeholder={getLocalizedText(locale, 'Enter your full name', 'ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи')}
                />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700">
                  {getLocalizedText(locale, 'Company', 'ржХрзЛржорзНржкрж╛ржирж┐')}
                </label>
                <input
                    type="text"
                    className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
                    placeholder={getLocalizedText(locale, 'Company name (optional)', 'ржХрзЛржорзНржкрж╛ржирж┐рж░ ржирж╛ржо (ржРржЪрзНржЫрж┐ржХ)')}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700">
                  {getLocalizedText(locale, 'Email Address', 'ржЗржорзЗржЗрж▓ ржарж┐ржХрж╛ржирж╛')} *
                </label>
                <input
                    type="email"
                    required
                    className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
                    placeholder={getLocalizedText(locale, 'your@email.com', 'your@email.com')}
                />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700">
                  {getLocalizedText(locale, 'Phone Number', 'ржлрзЛржи ржиржорзНржмрж░')} *
                </label>
                <input
                    type="tel"
                    required
                    className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
                    placeholder="+880-1XXXXXXXXX"
                />
              </div>
            </div>

            <div>
              <label className="mb-2 block text-sm font-medium text-gray-700">
                {getLocalizedText(locale, 'Subject', 'ржмрж┐рж╖ржпрж╝')} *
              </label>
              <select
                  required
                  className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
              >
                <option value="">
                  {getLocalizedText(locale, 'Select a subject', 'ржПржХржЯрж┐ ржмрж┐рж╖ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи')}
                </option>
                {FORM_SUBJECTS.map((subject) => (
                    <option key={subject.key} value={subject.key}>
                      {subject.icon} {getSubjectText(locale, subject.key)}
                    </option>
                ))}
              </select>
            </div>

            <div>
              <label className="mb-2 block text-sm font-medium text-gray-700">
                {getLocalizedText(locale, 'Message', 'ржмрж╛рж░рзНрждрж╛')} *
              </label>
              <textarea
                  required
                  rows={6}
                  className="w-full rounded-xl border border-gray-300 bg-white px-4 py-3 text-sm focus:border-btcl-primary focus:outline-none focus:ring-2 focus:ring-btcl-primary/20"
                  placeholder={getLocalizedText(
                      locale,
                      'Tell us how we can help you...',
                      'ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрж╛ ржмрж▓рзБржи...'
                  )}
              />
            </div>

            <Button
                type="submit"
                className="w-full transform rounded-xl bg-gradient-to-r from-btcl-primary to-green-600 py-4 text-lg font-semibold transition-all duration-300 hover:scale-105 hover:shadow-xl"
            >
              {getLocalizedText(locale, 'Send Message', 'ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржи')}
            </Button>
          </form>
        </CardContent>
      </Card>
  )
}

// Support Channels Section Component
function SupportChannelsSection({
                                  supportChannels,
                                  locale,
                                }: {
  supportChannels: SupportChannel[]
  locale: string
}) {
  return (
      <div>
        <div className="mb-8">
        <span className="inline-flex items-center gap-2 rounded-full bg-blue-100 px-4 py-2 text-sm font-semibold text-blue-700">
          <span className="h-2 w-2 rounded-full bg-blue-500" />
          {getLocalizedText(locale, 'Support Channels', 'рж╕рж╛ржкрзЛрж░рзНржЯ ржЪрзНржпрж╛ржирзЗрж▓')}
        </span>
        </div>
        <h2 className="mb-8 text-3xl font-bold text-gray-900">
          {getLocalizedText(locale, 'How to Reach Us', 'ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ ржЙржкрж╛ржпрж╝')}
        </h2>
        <div className="space-y-6">
          {supportChannels.map((channel, index) => (
              <SupportChannelCard key={index} channel={channel} />
          ))}
        </div>
      </div>
  )
}

// Support Channel Card Component
function SupportChannelCard({ channel }: { channel: SupportChannel }) {
  return (
      <Card className="group transition-all duration-300 hover:scale-105 hover:shadow-xl">
        <CardContent className="p-6">
          <div className="flex items-start gap-4">
            <div
                className={`flex h-16 w-16 items-center justify-center rounded-2xl text-3xl ${
                    SUPPORT_CHANNEL_COLORS[channel.color as keyof typeof SUPPORT_CHANNEL_COLORS]
                }`}
            >
              {channel.icon}
            </div>
            <div className="flex-1">
              <h3 className="mb-2 text-xl font-bold text-gray-900">{channel.title}</h3>
              <p className="mb-4 text-gray-600">{channel.description}</p>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <div className="h-2 w-2 rounded-full bg-btcl-primary" />
                  <span className="font-medium text-btcl-primary">{channel.contact}</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="h-2 w-2 rounded-full bg-green-500" />
                  <span className="text-sm text-gray-500">{channel.response}</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
  )
}

// Office Locations Section Component
function OfficeLocationsSection({ offices, locale }: { offices: Office[]; locale: string }) {
  return (
      <div>
        <div className="mb-8">
        <span className="inline-flex items-center gap-2 rounded-full bg-purple-100 px-4 py-2 text-sm font-semibold text-purple-700">
          <span className="h-2 w-2 rounded-full bg-purple-500" />
          {getLocalizedText(locale, 'Office Locations', 'ржЕржлрж┐рж╕рзЗрж░ ржЕржмрж╕рзНржерж╛ржи')}
        </span>
        </div>
        <h2 className="mb-8 text-3xl font-bold text-gray-900">
          {getLocalizedText(locale, 'Visit Our Offices', 'ржЖржорж╛ржжрзЗрж░ ржЕржлрж┐рж╕ ржнрж┐ржЬрж┐ржЯ ржХрж░рзБржи')}
        </h2>
        <div className="space-y-6">
          {offices.map((office, index) => (
              <OfficeCard key={index} office={office} />
          ))}
        </div>
      </div>
  )
}

// Office Card Component
function OfficeCard({ office }: { office: Office }) {
  const isPrimary = office.type === 'primary'

  return (
      <Card
          className={`group transition-all duration-300 hover:scale-105 hover:shadow-xl ${
              isPrimary ? 'border-2 border-btcl-primary/20 bg-gradient-to-br from-green-50 to-white' : ''
          }`}
      >
        <CardContent className="p-6">
          <div className="mb-4 flex items-start justify-between">
            <h3 className="text-xl font-bold text-gray-900">{office.name}</h3>
            {isPrimary && (
                <span className="rounded-full bg-btcl-primary px-3 py-1 text-xs font-semibold text-white">
              PRIMARY
            </span>
            )}
          </div>
          <div className="space-y-3">
            <div className="flex items-start gap-3">
              <div className="flex h-6 w-6 items-center justify-center">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                  />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </div>
              <span className="text-gray-700">{office.address}</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="flex h-6 w-6 items-center justify-center">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                  />
                </svg>
              </div>
              <span className="font-medium text-btcl-primary">{office.phone}</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="flex h-6 w-6 items-center justify-center">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  />
                </svg>
              </div>
              <span className="font-medium text-btcl-primary">{office.email}</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="flex h-6 w-6 items-center justify-center">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <span className="text-gray-700">{office.hours}</span>
            </div>
          </div>
        </CardContent>
      </Card>
  )
}

// FAQ Section Component
function FAQSection({ faqs, locale }: { faqs: FAQ[]; locale: string }) {
  return (
      <section className="bg-gray-50 py-24">
        <div className="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
          <div className="mb-20 text-center">
            <div className="mb-8">
            <span className="inline-flex items-center gap-2 rounded-full bg-yellow-100 px-4 py-2 text-sm font-semibold text-yellow-700">
              <span className="h-2 w-2 rounded-full bg-yellow-500" />
              {getLocalizedText(locale, 'Help Center', 'рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░')}
            </span>
            </div>
            <h2 className="mb-4 text-4xl font-bold text-gray-900 md:text-5xl">
              {getLocalizedText(locale, 'Frequently Asked Questions', 'ржкрзНрж░рж╛ржпрж╝рж╢ржЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж┐ржд ржкрзНрж░рж╢рзНржи')}
            </h2>
            <p className="text-xl text-gray-600">
              {getLocalizedText(locale, 'Quick answers to common questions', 'рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржжрзНрж░рзБржд ржЙрждрзНрждрж░')}
            </p>
          </div>

          <div className="space-y-6">
            {faqs.map((faq, index) => (
                <FAQCard key={index} faq={faq} />
            ))}
          </div>

          <div className="mt-12 text-center">
            <p className="mb-6 text-lg text-gray-600">
              {getLocalizedText(
                  locale,
                  "Can't find what you're looking for?",
                  'ржЖржкржирж┐ ржпрж╛ ржЦрзБржБржЬржЫрзЗржи рждрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржЪрзНржЫрзЗржи ржирж╛?'
              )}
            </p>
            <Link href="#contact-form">
              <Button className="transform rounded-xl bg-gradient-to-r from-btcl-primary to-green-600 px-8 py-3 font-semibold transition-all duration-300 hover:scale-105">
                {getLocalizedText(locale, 'Contact Support', 'рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи')}
              </Button>
            </Link>
          </div>
        </div>
      </section>
  )
}

// FAQ Card Component
function FAQCard({ faq }: { faq: FAQ }) {
  return (
      <Card className="transition-all duration-300 hover:shadow-lg">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-start gap-4 text-xl">
            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-btcl-primary text-sm font-bold text-white">
              Q
            </div>
            {faq.question}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-start gap-4">
            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-green-100 text-sm font-bold text-green-700">
              A
            </div>
            <p className="text-gray-600">{faq.answer}</p>
          </div>
        </CardContent>
      </Card>
  )
}

// Helper function for form subjects
function getSubjectText(locale: string, key: string): string {
  const subjects = {
    sales: {
      en: 'Sales Inquiry',
      bn: 'ржмрж┐ржХрзНрж░ржпрж╝ ржЕржирзБрж╕ржирзНржзрж╛ржи',
    },
    support: {
      en: 'Technical Support',
      bn: 'ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕рж╣рж╛ржпрж╝рждрж╛',
    },
    billing: {
      en: 'Billing Question',
      bn: 'ржмрж┐рж▓рж┐ржВ ржкрзНрж░рж╢рзНржи',
    },
    partnership: {
      en: 'Partnership',
      bn: 'ржЕржВрж╢рзАржжрж╛рж░рж┐рждрзНржм',
    },
    other: {
      en: 'Other',
      bn: 'ржЕржирзНржпрж╛ржирзНржп',
    },
  }

  return subjects[key as keyof typeof subjects]?.[locale as 'en' | 'bn'] ?? ''
}