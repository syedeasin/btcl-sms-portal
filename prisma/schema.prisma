// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  phone             String              @unique
  company           String?
  password          String
  emailVerified     DateTime?
  image             String?
  verificationStatus VerificationStatus @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  accounts          Account[]
  sessions          Session[]
  documents         Document[]
  orders            Order[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Document {
  id          String       @id @default(cuid())
  userId      String
  type        DocumentType
  filename    String
  originalName String
  fileUrl     String
  fileSize    Int
  mimeType    String
  status      DocumentStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Package {
  id          String   @id @default(cuid())
  name        String
  nameEn      String
  nameBn      String
  description String   @db.Text
  descriptionEn String @db.Text
  descriptionBn String @db.Text
  price       Decimal  @db.Decimal(10, 2)
  smsCount    Int
  validityDays Int
  features    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      Order[]
  
  @@map("packages")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  packageId       String
  quantity        Int         @default(1)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("BDT")
  status          OrderStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?     @unique
  sslcommerzTranId String?    @unique
  paymentData     Json?
  activatedAt     DateTime?
  expiresAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id])
  
  @@map("orders")
}

model SMSUsage {
  id          String   @id @default(cuid())
  userId      String
  orderId     String?
  smsCount    Int
  recipientCount Int
  message     String   @db.Text
  sender      String?
  status      SMSStatus @default(PENDING)
  deliveredCount Int   @default(0)
  failedCount    Int   @default(0)
  cost        Decimal  @db.Decimal(8, 4)
  sentAt      DateTime @default(now())
  
  @@map("sms_usage")
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  RESUBMISSION_REQUIRED
}

enum DocumentType {
  NID
  PASSPORT
  TRADE_LICENSE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  ACTIVATED
  EXPIRED
  CANCELLED
  REFUNDED
}

enum SMSStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}