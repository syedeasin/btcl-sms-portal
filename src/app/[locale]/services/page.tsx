import { useTranslations } from 'next-intl'
import Link from 'next/link'

import { Header } from '@/components/layout/Header'
import { Footer } from '@/components/layout/Footer'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card'

// Types
interface Service {
  title: string
  description: string
  icon: string
  features: string[]
}

interface APIFeature {
  title: string
  description: string
  icon: string
}

interface Industry {
  name: string
  icon: string
}

interface TechnicalSpec {
  value: string
  label: string
  description?: string
}

interface ServicesPageProps {
  params: {
    locale: string
  }
}

// Constants
const TECHNICAL_SPECS = [
  {
    key: 'characters',
    value: '160',
    icon: 'üìù',
  },
  {
    key: 'throughput',
    value: '1000',
    icon: '‚ö°',
  },
  {
    key: 'delivery_rate',
    value: '99.9%',
    icon: 'üéØ',
  },
  {
    key: 'delivery_time',
    value: '<3s',
    icon: '‚è±Ô∏è',
  },
] as const

const INDUSTRY_ICONS = {
  banking: 'üè¶',
  ecommerce: 'üõí',
  healthcare: 'üè•',
  education: 'üéì',
  realestate: 'üè°',
  travel: '‚úàÔ∏è',
} as const

// Utility functions
const getLocalizedText = (locale: string, enText: string, bnText: string): string => {
  return locale === 'en' ? enText : bnText
}

// Custom hooks
const useServicesData = (locale: string) => {
  const services: Service[] = [
    {
      title: getLocalizedText(locale, 'Promotional SMS', '‡¶™‡ßç‡¶∞‡¶Æ‡ßã‡¶∂‡¶®‡¶æ‡¶≤ ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏'),
      description: getLocalizedText(
          locale,
          'Send marketing messages, offers, and promotional content to your customer base with high delivery rates.',
          '‡¶â‡¶ö‡ßç‡¶ö ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∞‡ßá‡¶ü ‡¶∏‡¶π ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶¨‡ßá‡¶∏‡ßá ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ, ‡¶Ö‡¶´‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Æ‡ßã‡¶∂‡¶®‡¶æ‡¶≤ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§'
      ),
      icon: 'üì¢',
      features: [
        getLocalizedText(locale, 'Custom sender ID', '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø'),
        getLocalizedText(locale, 'Schedule messages', '‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ'),
        getLocalizedText(locale, 'Bulk upload', '‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶Ü‡¶™‡¶≤‡ßã‡¶°'),
        getLocalizedText(locale, 'Real-time tracking', '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç'),
      ],
    },
    {
      title: getLocalizedText(locale, 'Transactional SMS', '‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏'),
      description: getLocalizedText(
          locale,
          'Send OTPs, alerts, confirmations, and other transaction-related messages with priority delivery.',
          '‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶π ‡¶ì‡¶ü‡¶ø‡¶™‡¶ø, ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ, ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®-‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§'
      ),
      icon: 'üîê',
      features: [
        getLocalizedText(locale, 'Priority routing', '‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶â‡¶ü‡¶ø‡¶Ç'),
        getLocalizedText(locale, 'High delivery speed', '‡¶â‡¶ö‡ßç‡¶ö ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ó‡¶§‡¶ø'),
        getLocalizedText(locale, '24/7 availability', '‡ß®‡ß™/‡ß≠ ‡¶∏‡¶π‡¶ú‡¶≤‡¶≠‡ßç‡¶Ø‡¶§‡¶æ'),
        getLocalizedText(locale, 'API integration', 'API ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶∂‡¶®'),
      ],
    },
    {
      title: getLocalizedText(locale, 'Two-Way SMS', '‡¶¶‡ßç‡¶¨‡¶ø‡¶Æ‡ßÅ‡¶ñ‡ßÄ ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏'),
      description: getLocalizedText(
          locale,
          'Enable interactive communication with customers through two-way messaging capabilities.',
          '‡¶¶‡ßç‡¶¨‡¶ø‡¶Æ‡ßÅ‡¶ñ‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ø‡¶Ç ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶∏‡¶ï‡ßç‡¶∑‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
      ),
      icon: 'üí¨',
      features: [
        getLocalizedText(locale, 'Receive replies', '‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£'),
        getLocalizedText(locale, 'Keyword automation', '‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶®'),
        getLocalizedText(locale, 'Conversation tracking', '‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç'),
        getLocalizedText(locale, 'Auto responses', '‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ'),
      ],
    },
    {
      title: getLocalizedText(locale, 'Voice SMS', '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏'),
      description: getLocalizedText(
          locale,
          'Deliver voice messages directly to mobile phones for important announcements and alerts.',
          '‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ò‡ßã‡¶∑‡¶£‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶´‡ßã‡¶®‡ßá ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡ßå‡¶Å‡¶õ‡ßá ‡¶¶‡¶ø‡¶®‡•§'
      ),
      icon: 'üéµ',
      features: [
        getLocalizedText(locale, 'Text-to-speech', '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü-‡¶ü‡ßÅ-‡¶∏‡ßç‡¶™‡¶ø‡¶ö'),
        getLocalizedText(locale, 'Multiple languages', '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ'),
        getLocalizedText(locale, 'Voice recording', '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ø‡¶Ç'),
        getLocalizedText(locale, 'Call reporting', '‡¶ï‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç'),
      ],
    },
  ]

  const apiFeatures: APIFeature[] = [
    {
      title: 'RESTful API',
      description: getLocalizedText(
          locale,
          'Easy-to-integrate REST API with comprehensive documentation and code examples.',
          '‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶ï ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶° ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶∏‡¶π ‡¶∏‡¶π‡¶ú-‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶ü REST API‡•§'
      ),
      icon: 'üîå',
    },
    {
      title: getLocalizedText(locale, 'SDKs Available', 'SDK ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß'),
      description: getLocalizedText(
          locale,
          'Software Development Kits for popular programming languages including PHP, Python, Java, and .NET.',
          'PHP, Python, Java ‡¶è‡¶¨‡¶Ç .NET ‡¶∏‡¶π ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶ø‡¶ü‡•§'
      ),
      icon: 'üì¶',
    },
    {
      title: getLocalizedText(locale, 'Webhook Support', '‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü'),
      description: getLocalizedText(
          locale,
          'Real-time delivery notifications and status updates through webhook callbacks.',
          '‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡•§'
      ),
      icon: 'üîî',
    },
    {
      title: getLocalizedText(locale, 'Rate Limiting', '‡¶∞‡ßá‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç'),
      description: getLocalizedText(
          locale,
          'Configurable rate limits to control message sending frequency and protect your application.',
          '‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡ßá‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶∞‡ßá‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡•§'
      ),
      icon: '‚öôÔ∏è',
    },
  ]

  const industries: Industry[] = [
    {
      name: getLocalizedText(locale, 'Banking & Finance', '‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶ø‡¶Ç ‡¶ì ‡¶Ö‡¶∞‡ßç‡¶•'),
      icon: INDUSTRY_ICONS.banking,
    },
    {
      name: getLocalizedText(locale, 'E-commerce', '‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏'),
      icon: INDUSTRY_ICONS.ecommerce,
    },
    {
      name: getLocalizedText(locale, 'Healthcare', '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶∏‡ßá‡¶¨‡¶æ'),
      icon: INDUSTRY_ICONS.healthcare,
    },
    {
      name: getLocalizedText(locale, 'Education', '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ'),
      icon: INDUSTRY_ICONS.education,
    },
    {
      name: getLocalizedText(locale, 'Real Estate', '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤ ‡¶è‡¶∏‡ßç‡¶ü‡ßá‡¶ü'),
      icon: INDUSTRY_ICONS.realestate,
    },
    {
      name: getLocalizedText(locale, 'Travel & Tourism', '‡¶≠‡ßç‡¶∞‡¶Æ‡¶£ ‡¶ì ‡¶™‡¶∞‡ßç‡¶Ø‡¶ü‡¶®'),
      icon: INDUSTRY_ICONS.travel,
    },
  ]

  const technicalSpecs: TechnicalSpec[] = TECHNICAL_SPECS.map((spec) => ({
    value: spec.value,
    label: getTechnicalSpecLabel(locale, spec.key),
    description: getTechnicalSpecDescription(locale, spec.key),
  }))

  return { services, apiFeatures, industries, technicalSpecs }
}

// Main Component
export default function ServicesPage({ params: { locale } }: ServicesPageProps) {
  const t = useTranslations()
  const { services, apiFeatures, industries, technicalSpecs } = useServicesData(locale)

  return (
      <div className="min-h-screen bg-white">
        <Header />

        <HeroSection locale={locale} />
        <ServicesGridSection services={services} locale={locale} />
        <APIFeaturesSection apiFeatures={apiFeatures} locale={locale} />
        <TechnicalSpecsSection technicalSpecs={technicalSpecs} locale={locale} />
        <IndustriesSection industries={industries} locale={locale} />

        <Footer />
      </div>
  )
}

// Hero Section Component
function HeroSection({ locale }: { locale: string }) {
  return (
      <section className="relative overflow-hidden bg-gradient-to-br from-btcl-primary via-green-600 to-btcl-secondary py-24">
        {/* Animated Background Elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -left-10 top-10 h-40 w-40 animate-pulse rounded-full bg-white/5 blur-3xl" />
          <div className="absolute -right-16 top-32 h-60 w-60 animate-pulse rounded-full bg-white/5 blur-3xl delay-1000" />
          <div className="absolute bottom-20 left-1/3 h-32 w-32 animate-pulse rounded-full bg-white/5 blur-3xl delay-500" />
        </div>

        <div className="relative z-10 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="text-center text-white">
            {/* Badge */}
            <div className="mb-8 inline-flex items-center gap-2 rounded-full border border-white/20 bg-white/10 px-6 py-3 backdrop-blur-sm">
              <span className="text-2xl">üöÄ</span>
              <span className="font-semibold">
              {getLocalizedText(locale, 'Enterprise Solutions', '‡¶è‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®')}
            </span>
            </div>

            <h1 className="mb-8 text-5xl font-bold leading-tight md:text-6xl lg:text-7xl">
            <span className="block bg-gradient-to-r from-white via-green-100 to-white bg-clip-text text-transparent">
              {getLocalizedText(locale, 'Our Services', '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π')}
            </span>
            </h1>

            <p className="mx-auto max-w-4xl text-xl leading-relaxed text-green-100/90 md:text-2xl">
              {getLocalizedText(
                  locale,
                  'Comprehensive SMS solutions designed to meet all your business communication needs with enterprise-grade reliability and performance.',
                  '‡¶è‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú-‡¶ó‡ßç‡¶∞‡ßá‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶∏‡¶π ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶Æ‡ßá‡¶ü‡¶æ‡¶§‡ßá ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶ï ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡•§'
              )}
            </p>

            {/* Scroll Indicator */}
            <div className="mt-16 animate-bounce">
              <div className="mx-auto flex h-12 w-8 justify-center rounded-full border-2 border-white/40">
                <div className="mt-3 h-4 w-1 animate-pulse rounded-full bg-white/60" />
              </div>
            </div>
          </div>
        </div>
      </section>
  )
}

// Services Grid Section Component
function ServicesGridSection({ services, locale }: { services: Service[]; locale: string }) {
  return (
      <section className="py-24">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="mb-20 text-center">
            <div className="mb-8">
            <span className="inline-flex items-center gap-2 rounded-full bg-green-100 px-4 py-2 text-sm font-semibold text-green-700">
              <span className="h-2 w-2 rounded-full bg-green-500" />
              {getLocalizedText(locale, 'Service Types', '‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶®')}
            </span>
            </div>
            <h2 className="mb-4 text-4xl font-bold text-gray-900 md:text-5xl">
              {getLocalizedText(locale, 'SMS Service Types', '‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶®')}
            </h2>
            <p className="text-xl text-gray-600">
              {getLocalizedText(
                  locale,
                  'Choose from our range of specialized SMS services',
                  '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶æ‡¶Ø‡¶º‡¶ø‡¶§ ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®'
              )}
            </p>
          </div>

          <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
            {services.map((service, index) => (
                <ServiceCard key={index} service={service} />
            ))}
          </div>
        </div>
      </section>
  )
}

// Service Card Component
function ServiceCard({ service }: { service: Service }) {
  return (
      <Card className="group h-full transition-all duration-300 hover:scale-105 hover:shadow-xl">
        <CardHeader className="pb-4">
          <div className="mb-6 flex h-16 w-16 items-center justify-center rounded-2xl bg-gradient-to-r from-btcl-primary to-green-600 text-4xl transition-all duration-300 group-hover:scale-110">
            {service.icon}
          </div>
          <CardTitle className="text-2xl">{service.title}</CardTitle>
          <CardDescription className="text-lg text-gray-600">{service.description}</CardDescription>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {service.features.map((feature, featureIndex) => (
                <li key={featureIndex} className="flex items-center gap-3">
                  <div className="flex h-6 w-6 items-center justify-center rounded-full bg-green-100">
                    <span className="text-sm text-btcl-primary">‚úì</span>
                  </div>
                  <span className="text-gray-700">{feature}</span>
                </li>
            ))}
          </ul>
        </CardContent>
      </Card>
  )
}

// API Features Section Component
function APIFeaturesSection({ apiFeatures, locale }: { apiFeatures: APIFeature[]; locale: string }) {
  return (
      <section className="bg-gray-50 py-24">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="mb-20 text-center">
            <div className="mb-8">
            <span className="inline-flex items-center gap-2 rounded-full bg-blue-100 px-4 py-2 text-sm font-semibold text-blue-700">
              <span className="h-2 w-2 rounded-full bg-blue-500" />
              {getLocalizedText(locale, 'Developer Tools', '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‡¶ü‡ßÅ‡¶≤‡¶∏')}
            </span>
            </div>
            <h2 className="mb-4 text-4xl font-bold text-gray-900 md:text-5xl">
              {getLocalizedText(locale, 'Developer-Friendly API', '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞-‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨ API')}
            </h2>
            <p className="text-xl text-gray-600">
              {getLocalizedText(
                  locale,
                  'Integrate SMS capabilities into your applications with our robust API',
                  '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ API ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'
              )}
            </p>
          </div>

          <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
            {apiFeatures.map((feature, index) => (
                <APIFeatureCard key={index} feature={feature} />
            ))}
          </div>

          <div className="mt-16 text-center">
            <Link href={`/${locale}/register`}>
              <Button
                  size="lg"
                  className="transform rounded-xl bg-gradient-to-r from-btcl-primary to-green-600 px-8 py-4 text-lg font-semibold text-white transition-all duration-300 hover:scale-105 hover:shadow-xl"
              >
                {getLocalizedText(locale, 'Get API Access', 'API ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶™‡¶æ‡¶®')}
              </Button>
            </Link>
          </div>
        </div>
      </section>
  )
}

// API Feature Card Component
function APIFeatureCard({ feature }: { feature: APIFeature }) {
  return (
      <Card className="group transition-all duration-300 hover:scale-105 hover:shadow-xl">
        <CardHeader>
          <div className="mb-4 flex items-center gap-4">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-blue-100 text-2xl">
              {feature.icon}
            </div>
            <CardTitle className="text-xl">{feature.title}</CardTitle>
          </div>
        </CardHeader>
        <CardContent>
          <CardDescription className="text-lg text-gray-600">{feature.description}</CardDescription>
        </CardContent>
      </Card>
  )
}

// Industries Section Component
function IndustriesSection({ industries, locale }: { industries: Industry[]; locale: string }) {
  return (
      <section className="py-24">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="mb-20 text-center">
            <div className="mb-8">
            <span className="inline-flex items-center gap-2 rounded-full bg-purple-100 px-4 py-2 text-sm font-semibold text-purple-700">
              <span className="h-2 w-2 rounded-full bg-purple-500" />
              {getLocalizedText(locale, 'Industry Focus', '‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶´‡ßã‡¶ï‡¶æ‡¶∏')}
            </span>
            </div>
            <h2 className="mb-4 text-4xl font-bold text-gray-900 md:text-5xl">
              {getLocalizedText(locale, 'Industries We Serve', '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡ßá ‡¶∏‡ßá‡¶¨‡¶æ ‡¶¶‡¶ø‡¶á')}
            </h2>
            <p className="text-xl text-gray-600">
              {getLocalizedText(
                  locale,
                  'Trusted by businesses across various industries',
                  '‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ü‡¶∏‡ßç‡¶•‡¶æ‡¶≠‡¶æ‡¶ú‡¶®'
              )}
            </p>
          </div>

          <div className="grid grid-cols-2 gap-6 md:grid-cols-3 lg:grid-cols-6">
            {industries.map((industry, index) => (
                <IndustryCard key={index} industry={industry} />
            ))}
          </div>
        </div>
      </section>
  )
}

// Industry Card Component
function IndustryCard({ industry }: { industry: Industry }) {
  return (
      <Card className="group text-center transition-all duration-300 hover:scale-105 hover:shadow-xl">
        <CardContent className="p-6">
          <div className="mb-4 text-4xl transition-all duration-300 group-hover:scale-110">
            {industry.icon}
          </div>
          <div className="font-medium text-gray-900">{industry.name}</div>
        </CardContent>
      </Card>
  )
}

// Technical Specifications Section Component
function TechnicalSpecsSection({
                                 technicalSpecs,
                                 locale,
                               }: {
  technicalSpecs: TechnicalSpec[]
  locale: string
}) {
  return (
      <section className="bg-gradient-to-r from-gray-900 to-gray-800 py-24">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="mb-20 text-center text-white">
            <div className="mb-8">
            <span className="inline-flex items-center gap-2 rounded-full bg-white/10 px-4 py-2 text-sm font-semibold text-white backdrop-blur-sm">
              <span className="h-2 w-2 rounded-full bg-white" />
              {getLocalizedText(locale, 'Performance', '‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ')}
            </span>
            </div>
            <h2 className="mb-4 text-4xl font-bold md:text-5xl">
              {getLocalizedText(locale, 'Technical Specifications', '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨')}
            </h2>
            <p className="text-xl text-gray-300">
              {getLocalizedText(
                  locale,
                  'Built for scale with enterprise-grade performance',
                  '‡¶è‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú-‡¶ó‡ßç‡¶∞‡ßá‡¶° ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶∏‡¶π ‡¶∏‡ßç‡¶ï‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§'
              )}
            </p>
          </div>

          <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
            {technicalSpecs.map((spec, index) => (
                <TechnicalSpecCard key={index} spec={spec} index={index} />
            ))}
          </div>
        </div>
      </section>
  )
}

// Technical Specification Card Component
function TechnicalSpecCard({ spec, index }: { spec: TechnicalSpec; index: number }) {
  const icon = TECHNICAL_SPECS[index]?.icon || 'üìä'

  return (
      <div className="group text-center text-white transition-all duration-300 hover:scale-110">
        <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-2xl bg-white/10 text-3xl backdrop-blur-sm transition-all duration-300 group-hover:bg-white/20">
          {icon}
        </div>
        <div className="mb-2 text-4xl font-bold text-green-400 md:text-5xl">{spec.value}</div>
        <div className="text-lg text-gray-300">{spec.label}</div>
        {spec.description && <div className="mt-1 text-sm text-gray-400">{spec.description}</div>}
      </div>
  )
}

// Helper functions for technical specifications
function getTechnicalSpecLabel(locale: string, key: string): string {
  const labels = {
    characters: {
      en: 'Characters per SMS',
      bn: '‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞',
    },
    throughput: {
      en: 'SMS per second',
      bn: '‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏',
    },
    delivery_rate: {
      en: 'Delivery rate',
      bn: '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∞‡ßá‡¶ü',
    },
    delivery_time: {
      en: 'Average delivery time',
      bn: '‡¶ó‡¶°‡¶º ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º',
    },
  }

  return labels[key as keyof typeof labels]?.[locale as 'en' | 'bn'] ?? ''
}

function getTechnicalSpecDescription(locale: string, key: string): string {
  const descriptions = {
    characters: {
      en: 'Standard SMS length',
      bn: '‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø',
    },
    throughput: {
      en: 'Maximum throughput',
      bn: '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶•‡ßç‡¶∞‡ßÅ‡¶™‡ßÅ‡¶ü',
    },
    delivery_rate: {
      en: 'Success rate',
      bn: '‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞',
    },
    delivery_time: {
      en: 'Typical delivery',
      bn: '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø',
    },
  }

  return descriptions[key as keyof typeof descriptions]?.[locale as 'en' | 'bn'] ?? ''
}